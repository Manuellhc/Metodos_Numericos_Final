'''
Enunciado: 
Dado el conjunto de datos:
    x=[1,2,3,4,5],y=[2,3,5,7,11]

Ajustar una línea recta a los datos usando mínimos cuadrados.
 
Objetivo:
Obtener la recta y=a+bx que mejor ajuste los datos

'''
def ajuste_minimos_cuadrados(x, y):
    if len(x) != len(y):
        raise ValueError("Las listas x e y deben tener la misma longitud")
    
    n = len(x)
    sum_x = sum(x)
    sum_y = sum(y)
    sum_x2 = sum(xi ** 2 for xi in x)
    sum_xy = sum(xi * yi for xi, yi in zip(x, y))

    denominador = n * sum_x2 - sum_x ** 2
    if denominador == 0:
        raise ValueError("No se puede calcular la regresión: denominador cero (¿todos los x son iguales?)")

    b = (n * sum_xy - sum_x * sum_y) / denominador
    a = (sum_y - b * sum_x) / n  # Fórmula más estable numéricamente

    return a, b

# Datos de ejemplo
x = [1, 2, 3, 4, 5]
y = [2, 3, 5, 7, 11]

# Ajuste de la recta
try:
    a, b = ajuste_minimos_cuadrados(x, y)
    print(f"Recta ajustada: y = {a:.4f} + {b:.4f}x")

    # Valores ajustados
    y_ajustado = [a + b * xi for xi in x]
    print("Valores ajustados:", [round(val, 4) for val in y_ajustado])

except ValueError as e:
    print("Error:", e)








# Interpretación: La recta ajustada se acerca bastante a los valores reales 𝑦 reflejando un buen modelo lineal para los datos..
# El código implementa el método de mínimos cuadrados para ajustar una línea recta a un conjunto de datos, calculando los coeficientes a y b de la ecuación y = a + bx.
# El resultado muestra la ecuación de la recta ajustada y los valores ajustados para cada punto x.


