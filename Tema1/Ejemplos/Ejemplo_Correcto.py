'''
Enunciado:
Analizar el error de redondeo y propagaci√≥n al evaluar la funci√≥n ùëì(Zùë•)=ùëí^ùë• ‚àí 1  para un valor peque√±o de ùë•=0.1, usando redondeo a 5 cifras significativas.

Objetivo:
Mostrar c√≥mo el redondeo afecta el resultado num√©rico y c√≥mo se propaga el error en una operaci√≥n compuesta.

'''

import math
import decimal

# Configurar la precisi√≥n decimal a 5 cifras significativas
decimal.getcontext().prec = 5

# Funci√≥n para redondear un n√∫mero a 5 cifras usando Decimal
def redondear(x):
    return float(decimal.Decimal(x))

# Definimos la funci√≥n a evaluar: e^x - 1
def funcion(x):
    return math.exp(x) - 1

# Funci√≥n principal para calcular errores
def calcular_errores(x):
    print(f"\nEvaluando en x = {x}")

    # Valor exacto (real) usando math.exp
    real = funcion(x)

    # Valor aproximado con redondeo
    aproximado = redondear(real)

    # C√°lculo de error absoluto
    error = abs(real - aproximado)

    # C√°lculo de error relativo (si el real no es 0)
    error_rel = abs(error / real) if real != 0 else 0

    # Imprimir resultados
    print(f"Valor real:       {real}")
    print(f"Valor redondeado: {aproximado}")
    print(f"Error absoluto:   {error}")
    print(f"Error relativo:   {error_rel}")

    # Simulaci√≥n de propagaci√≥n de errores:
    # Paso 1: calcular x¬≤ y redondearlo
    paso1 = redondear(x * x)

    # Paso 2: sumar x al resultado anterior y redondear
    paso2 = redondear(paso1 + x)

    # Mostrar pasos intermedios
    print(f"Propagaci√≥n: Paso 1 = {paso1}, Paso 2 = {paso2}")

# Ejecutar el ejemplo funcional con x = 0.1
calcular_errores(0.1)

# Nota: No se incluyen entradas de usuario para evitar errores de datos.

'''
interpretaci√≥n del resultado:
Aunque se us√≥ redondeo a solo 5 cifras, el error absoluto es muy peque√±o, lo cual indica que el redondeo fue aceptable para este caso.

El error relativo es menor a 1%, lo que tambi√©n es bueno.

En las operaciones compuestas (propagaci√≥n), los resultados se mantuvieron dentro de un rango controlado.

Este caso demuestra que con valores peque√±os y control del redondeo, los errores num√©ricos pueden ser manejados sin afectar gravemente el resultado final.
'''
