'''
Enunciado: 
Aproximar la integral de f(x)=ln(x+1) en [0,2] usando 𝑛=10 subintervalos.

 
Objetivo:
Comparar con el valor real aproximado de la integral

'''
import math

def f(x):
    return math.log(x + 1)

# Método de Simpson para aproximar la integral de una función
def regla_simpson(f, a, b, n):
    if n % 2 != 0:
        raise ValueError("El número de intervalos (n) debe ser par.")

    h = (b - a) / n
    suma = f(a) + f(b)

    for i in range(1, n):
        x = a + i * h
        if i % 2 == 0:
            suma += 2 * f(x)
        else:
            suma += 4 * f(x)

    return (h / 3) * suma




resultado = regla_simpson(f, 0, 2, 10)
print("Aproximación:", resultado)






# Interpretación: La aproximación de la integral es cercana al valor real, lo que indica que el método de Simpson es efectivo para funciones suaves. La precisión del método depende del número de subintervalos utilizados; en este caso, 10 subintervalos proporcionan una buena aproximación.
# La precisión del método de Simpson mejora con un mayor número de subintervalos, especialmente para funciones suaves.



