'''
Enunciado: 
Resolver el sitema de ecuaciones: 

 Sistema de ecuaciones:
    # 2x + y - z = 8
    # -3x - y + 2z = -11
    # -2x + y + 2z = -3



Objetivo:
Hallar los valores de x e y que satisfacen el sistema de ecuaciones lineales.

'''
import numpy as np

def gauss_jordan(A, b):
    
   
    n = len(A)
    
    # Crear matriz aumentada
    M = np.concatenate((A, b.reshape(n, 1)), axis=1)
    
    # Aplicar eliminación hacia adelante y hacia atrás
    for i in range(n):
        # Pivoteo parcial: buscar el máximo en la columna actual
        max_row = np.argmax(np.abs(M[i:, i])) + i
        M[[i, max_row]] = M[[max_row, i]]
        
        # Verificar si el pivote es cero
        if np.abs(M[i, i]) < 1e-10:
            raise ValueError("El sistema es singular o mal condicionado")
        
        # Hacer el pivote igual a 1
        M[i] = M[i] / M[i, i]
        
        # Eliminar en todas las filas excepto la actual
        for j in range(n):
            if j != i:
                M[j] = M[j] - M[j, i] * M[i]
    
    # Extraer la solución
    x = M[:, -1]
    
    return x

# Ejemplo de uso
if __name__ == "__main__":
    
    
    A = np.array([
        [2, 1, -1],
        [-3, -1, 2],
        [-2, 1, 2]
    ], dtype=float)
    
    b = np.array([8, -11, -3], dtype=float)
    
    try:
        x = gauss_jordan(A, b)
        print("Solución del sistema:")
        print(f"x = {x[0]:.4f}")
        print(f"y = {x[1]:.4f}")
        print(f"z = {x[2]:.4f}")
    except ValueError as e:
        print(f"Error: {e}")





# Interpretación:# El método de Gauss-Jordan ha resuelto el sistema de ecuaciones lineales, encontrando los valores de x, y, y z que satisfacen las ecuaciones dadas.
# En este caso, los valores de x, y, y z son aproximadamente 2.0, 3.0, y -1.0 respectivamente.
# El resultado indica que el sistema de ecuaciones es consistente y tiene una única solución.




