'''
Enunciado: 
Resolver el sitema de ecuaciones: 

x + 2y + 3z = 1
4x + 5y + 6z = 2
7x + 8y + 9z = 3

Y

x + y = 1
x + y = 2

Objetivo:
Hallar los valores de x e y que satisfacen el sistema de ecuaciones lineales.

'''
import numpy as np

def gauss_jordan(A, b, verbose=False):
    """
    Resuelve un sistema de ecuaciones lineales Ax = b usando el método de Gauss-Jordan
    
    Parámetros:
    A: matriz de coeficientes (n x n)
    b: vector de términos independientes (n x 1)
    verbose: si True, muestra los pasos intermedios
    
    Retorna:
    x: vector solución (n x 1) o None si el sistema no tiene solución única
    """
    n = len(A)
    
    # Crear matriz aumentada
    M = np.concatenate((A, b.reshape(n, 1)), axis=1)
    if verbose:
        print("Matriz aumentada inicial:")
        print(M)
    
    for i in range(n):
        # Pivoteo parcial
        max_row = np.argmax(np.abs(M[i:, i])) + i
        if M[max_row, i] == 0:
            print("\nFALLA: Todos los elementos en la columna son cero.")
            print("El sistema no tiene solución única (puede ser singular o incompatible).")
            return None
            
        M[[i, max_row]] = M[[max_row, i]]
        if verbose:
            print(f"\nPaso {i+1}: Pivoteo parcial (fila {i+1} con {max_row+1})")
            print(M)
        
        # Normalizar fila pivote
        pivot = M[i, i]
        M[i] = M[i] / pivot
        if verbose:
            print(f"\nNormalización (fila {i+1} dividida por {pivot:.2f})")
            print(M)
        
        # Eliminación en otras filas
        for j in range(n):
            if j != i:
                factor = M[j, i]
                M[j] = M[j] - factor * M[i]
                if verbose:
                    print(f"\nEliminación en fila {j+1} usando factor {-factor:.2f}")
                    print(M)
    
    # Verificar solución
    if np.any(np.isnan(M[:, -1])):
        print("\nFALLA: El sistema no tiene solución única (filas inconsistentes).")
        return None
    
    return M[:, -1]

# Ejemplos de uso
if __name__ == "__main__":
    print("=== CASO EXITOSO ===")
    A1 = np.array([
        [2, 1, -1],
        [-3, -1, 2],
        [-2, 1, 2]
    ], dtype=float)
    b1 = np.array([8, -11, -3], dtype=float)
    
    sol1 = gauss_jordan(A1, b1, verbose=True)
    if sol1 is not None:
        print("\nSolución:", sol1)
    
    print("\n=== CASO DE FALLA (Sistema singular) ===")
    A2 = np.array([
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]
    ], dtype=float)
    b2 = np.array([1, 2, 3], dtype=float)
    
    sol2 = gauss_jordan(A2, b2, verbose=True)
    
    print("\n=== CASO DE FALLA (Sistema incompatible) ===")
    A3 = np.array([
        [1, 1],
        [1, 1]
    ], dtype=float)
    b3 = np.array([1, 2], dtype=float)
    
    sol3 = gauss_jordan(A3, b3, verbose=True)





# Interpretación: # El código implementa el método de Gauss-Jordan para resolver sistemas de ecuaciones lineales. Se crea una matriz aumentada y se aplica eliminación hacia adelante y hacia atrás, con pivoteo parcial para evitar divisiones por cero. Si el sistema es singular o incompatible, se informa al usuario. El parámetro `verbose` permite mostrar los pasos intermedios del proceso. Se incluyen ejemplos de uso con casos exitosos y fallidos.





