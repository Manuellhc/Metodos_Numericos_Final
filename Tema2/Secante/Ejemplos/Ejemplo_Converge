'''
 Enunciado:
Hallar la ra√≠z de ùëì(ùë•)=ùë•3‚àíùë•‚àí2 iniciando con ùë•0=1, ùë•1=2 y tolerancia de 10‚àí5 .

Objetivo:
Aplicar el m√©todo de la secante para encontrar una ra√≠z.


'''

def f(x):
    return x**3 - x - 2

def secante(x0, x1, tol):
    while abs(f(x1)) > tol:
        try:
            x2 = x1 - f(x1)*(x1 - x0)/(f(x1) - f(x0))
        except ZeroDivisionError:
            return "Divisi√≥n por cero"
        x0, x1 = x1, x2
    return x1

raiz = secante(1, 2, 1e-5)
print("Ra√≠z aproximada:", raiz)

# Interpretaci√≥n: El m√©todo de la secante converge a una ra√≠z de la funci√≥n en el intervalo dado, proporcionando una aproximaci√≥n cercana a la ra√≠z real con la tolerancia especificada.
# La funci√≥n tiene una ra√≠z real entre 1 y 2, y el m√©todo de la secante logra aproximarla correctamente.
# La secante es un m√©todo iterativo que utiliza dos puntos iniciales para aproximar la ra√≠z de una funci√≥n.
# En este caso, se inicia con x0=1 y x1=2, y el m√©todo converge a una ra√≠z cercana a 1.521.
# La secante es √∫til cuando no se dispone de una funci√≥n derivada, y puede ser m√°s eficiente que otros m√©todos como la bisecci√≥n o la regla falsa en ciertos casos.